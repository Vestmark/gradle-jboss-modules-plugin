apply plugin: 'idea'
apply plugin: 'groovy'
apply plugin: 'signing'
apply plugin: 'cobertura'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "net.saliman:gradle-cobertura-plugin:2.2.5" // cobertura plugin
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.0.1'
    }
}

repositories {
    mavenCentral()
}

cobertura {
    coverageIgnoreTrivial = true
    coverageFormats = ['html', 'xml'] // coveralls plugin depends on xml format report
    coverageSourceDirs = sourceSets.main.groovy.srcDirs
    coverageExcludes = ['.*com.github.zhurlik.repository.Server', '.*com.github.zhurlik.descriptor.Xsd.*write.*']
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

group = 'com.github.zhurlik'

dependencies {
    compile gradleApi()
    compile localGroovy()
}

// for local testing
apply plugin: 'maven'

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: uri('tmp-repo'))
        }
    }
}

tasks.test.doFirst{
    // for travis-ci.org
    logging.captureStandardOutput LogLevel.INFO
    logging.level = LogLevel.WARN
}

test {
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
    }
}

// custom task for creating source jar
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

// custom task for creating doc jar
task groovydocJar(type: Jar, dependsOn: 'groovydoc') {
    from groovydoc.destinationDir
    classifier = 'javadoc'
}

signing {
    // we only want to require signing if we are building a release version and we are going to publish it
    // required { gradle.taskGraph.hasTask("uploadArchives") }
    required = false
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            pom.project {
                name 'Gradle Plugin for JBoss Modules'
                description 'A gradle plugin that allows to make JBoss Modules'
                url 'https://github.com/zhurlik/gradle-jboss-modules-plugin'
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                scm {
                    connection 'scm:git:git@github.com:zhurlik/gradle-jboss-modules-plugin.git'
                    developerConnection 'scm:git:git@github.com:zhurlik/gradle-jboss-modules-plugin.git'
                    url 'git@github.com:zhurlik/gradle-jboss-modules-plugin.git'
                }
                developers {
                    developer {
                        name 'Uladzimir Zhuraulevich'
                        email 'zhurlik@gmail.com'
                        organizationUrl 'https://github.com/zhurlik'
                    }
                }
            }
        }
    }
}

// add source/doc jar tasks as artifacts
artifacts {
    archives jar
    archives sourcesJar, groovydocJar
}
