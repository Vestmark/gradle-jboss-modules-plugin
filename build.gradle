import static org.gradle.api.JavaVersion.VERSION_1_7

apply plugin: 'com.gradle.plugin-publish'
apply plugin: 'idea'
apply plugin: 'groovy'
apply plugin: 'cobertura'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'

buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath "net.saliman:gradle-cobertura-plugin:2.2.+" // cobertura plugin
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.4.+'
        classpath 'com.gradle.publish:plugin-publish-plugin:0.9.2'
    }
}

repositories {
    mavenCentral()
    jcenter()
}

cobertura {
    coverageIgnoreTrivial = true
    coverageFormats = ['html', 'xml'] // coveralls plugin depends on xml format report
    coverageSourceDirs = sourceSets.main.groovy.srcDirs
    coverageExcludes = ['.*com.github.zhurlik.repository.Server', '.*com.github.zhurlik.descriptor.Xsd.*write.*']
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

group = 'com.github.zhurlik'

targetCompatibility = VERSION_1_7

dependencies {
    compile gradleApi()
    compile localGroovy()
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

// for local testing
apply plugin: 'maven'

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: uri('tmp-repo'))
        }
    }
}

tasks.test.doFirst{
    // for travis-ci.org
    logging.captureStandardOutput LogLevel.INFO
    logging.level = LogLevel.WARN
}

test {
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
    }
}

// custom task for creating source jar
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

// custom task for creating doc jar
task groovydocJar(type: Jar, dependsOn: 'groovydoc') {
    from groovydoc.destinationDir
    classifier = 'javadoc'
}

// add source/doc jar tasks as artifacts
artifacts {
    archives jar
    archives sourcesJar, groovydocJar
}

tasks.clean.doFirst {
    delete 'tmp-repo/com'
}

// The configuration example below shows the minimum required properties
// configured to publish your plugin to the plugin portal
pluginBundle {
    website = 'https://github.com/zhurlik'
    vcsUrl = 'https://github.com/zhurlik/gradle-jboss-modules-plugin'
    description = 'A gradle plugin that allows to make JBoss Modules'
    tags = ['java', 'jboss', 'module', 'gradle', 'plugin', 'groovy', 'wildfly']

    plugins {
        jbossModulesPlugin {
            id = 'com.github.zhurlik.jbossmodules'
            displayName = 'Gradle JBoss Modules plugin'
        }
    }
}
